# Header ####
rm(list = ls())
library(ggplot2)
library(GGally) # Comparing variables and data exploration
library(mgcv) # Library to fit gams
library(gratia) # Modern library for visualizing and assessing gams
library(visreg)
library(dplyr)
library(tidyr)
library(xtable)
library(tibble)
setwd('./')
# 0) Load data ####
# - - - - - - - -
input_folder = './'
graphs_path = 'graphs/'
# Colours for each treatment
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
worst_concurvity <- function(m){
concurvity_matrix <- concurvity(m, full=F)$worst
# Remove any interaction terms
concurvity_matrix <- concurvity_matrix[,!grepl('^ti[(]', colnames(concurvity_matrix))]
concurvity_matrix <- concurvity_matrix[!grepl('^ti[(]', rownames(concurvity_matrix)),]
# Remove concurvities of parameters with themselves
concurvity_matrix <- concurvity_matrix[which(concurvity_matrix < 1)]
return(max(concurvity_matrix))
}
concurvity_list <- function(model_list){
conc_list <- c()
for (m in model_list){
conc_list <- append(conc_list, worst_concurvity(m))
}
return(conc_list)
}
r2_list <- function(model_list){
r2_list <- c()
for (m in model_list){
r2_list <- append(r2_list, summary(m)$r.sq)
}
return(r2_list)
}
visreg2 <- function(mod, xvar, by, data){
plt_plot <- visreg(mod, xvar = xvar, by=by, data = data, gg=T, method = "REML", overlay=T)
plt_line <- visreg(mod, xvar = xvar, data = data, gg=T, method = "REML", overlay=T)
plt_plot_data = ggplot_build(plt_plot)$data[[2]] # points and colours
plt_line_data = ggplot_build(plt_line)$data[[3]] # line
plt_std_data = ggplot_build(plt_line)$data[[1]] %>% # stddev around the line
group_by(x) %>%
mutate(y_type = if_else(y == min(y), "ymin", "ymax")) %>%
spread(key = y_type, value = y)
yminval = min(plt_plot_data$y)- (max(plt_plot_data$y) - min(plt_plot_data$y))/20
plt_plot_data$grp <- NA
for (grp_num in 1:length(levels(plt_plot$plot_env$bb))){
current_label = levels(plt_plot$plot_env$bb)[grp_num]
current_colour = plt_plot$plot_env$col[grp_num]
plt_plot_data[which(plt_plot_data$colour == current_colour),]$grp <- current_label
}
plt = ggplot()
plt = plt + geom_point(data=plt_plot_data, aes(x=x, y=y, color = grp), size=0.75)
plt = plt + geom_ribbon(data=plt_std_data, aes(x=x, ymin=ymin, ymax=ymax), fill = 'gray85', alpha=0.5)
plt = plt + geom_line(data=plt_line_data, aes(x=x, y=y), color = 'black')
plt = plt + theme_bw()
plt = plt + labs(x=plt_plot$labels$x, y=plt_plot$labels$y)
#plt = plt + labs(x='Tr', y='CO flux', colour='Treatment')
return(plt)
}
visreg3 <- function(mod, xvar, by, data, minrange=0.25, maxrange=0.75){
plt_plot <- visreg(mod, xvar = xvar, by=by, data = data, gg=T, method = "REML", overlay=T)
plt_line <- visreg(mod, xvar = xvar, data = data, gg=T, method = "REML", overlay=T)
plt_plot_data = ggplot_build(plt_plot)$data[[2]] # points and colours
plt_line_data = ggplot_build(plt_line)$data[[3]] # line
plt_std_data = ggplot_build(plt_line)$data[[1]] %>% # stddev around the line
group_by(x) %>%
mutate(y_type = if_else(y == min(y), "ymin", "ymax")) %>%
spread(key = y_type, value = y)
yminval = min(ggplot_build(plt_line)$data[[1]]$y)
plt_plot_data$grp <- NA
plt_line_data$grp <- NA
for (grp_num in 1:length(levels(plt_plot$plot_env$bb))){
current_label = levels(plt_plot$plot_env$bb)[grp_num]
current_colour = plt_plot$plot_env$col[grp_num]
plt_plot_data[which(plt_plot_data$colour == current_colour),]$grp <- current_label
# Create quantile range df
xmin = quantile(plt_plot_data[which(plt_plot_data$group == grp_num),]$x, minrange)
xmax = quantile(plt_plot_data[which(plt_plot_data$group == grp_num),]$x, maxrange)
# Find median and corresponding y value for median
medianxval = median(plt_plot_data[which(plt_plot_data$group == grp_num),]$x)
next_higher <- min(plt_line_data[which(plt_line_data$x > medianxval),]$y, na.rm = T)
next_lower  <- max(plt_line_data[which(plt_line_data$x < medianxval),]$y, na.rm = T)
medianyval = (next_higher + next_lower)/2
if(!exists('quantile_df')){
quantile_df <- plt_line_data[which((plt_line_data$x >= xmin) & (plt_line_data$x < xmax)),]
quantile_df$grp <- current_label
quantile_df = quantile_df[which(!is.na(quantile_df$grp)),]
}else{
temp <- plt_line_data[which((plt_line_data$x >= xmin) & (plt_line_data$x < xmax)),]
temp$grp <- current_label
temp = temp[which(!is.na(temp$grp)),]
quantile_df = rbind(quantile_df, temp)
}
if(!exists('median_df')){
median_df = data.frame(grp = current_label, x = medianxval, y = medianyval)
}else{
median_df = rbind(median_df, data.frame(grp = current_label, x = medianxval, y = medianyval))
}
}
print(median_df)
plt = ggplot()
plt = plt + geom_ribbon(data=quantile_df, aes(x=x, ymin=yminval, ymax=y, fill=grp), alpha=0.5)
plt = plt + geom_ribbon(data=plt_std_data, aes(x=x, ymin=ymin, ymax=ymax), fill = 'gray85', alpha=0.5)
plt = plt + geom_line(data=plt_line_data, aes(x=x, y=y), color = 'black')
plt = plt + geom_point(data=median_df, aes(x=x, y=y, colour=grp), size=2)
plt = plt + theme_bw()
plt = plt + labs(x=plt_plot$labels$x, y=plt_plot$labels$y)
return(plt)
}
# 1) Preparing data ####
# - - - - - - - - - - - -
# https://towardsdatascience.com/producing-insights-with-generalized-additive-models-gams-cf2b68b1b847
df <- read.csv(paste0(input_folder,'all_summarised_daily.csv'))
temp <- df
# Rename columns
names(temp)[names(temp) == 'flux.co.ch_oc.nmol_m2_s']        <- 'co.flux'
names(temp)[names(temp) == 'flux.h2o.ch_oc.mmol_m2_s']       <- 'Tr'
names(temp)[names(temp) == 'flux.co2.ch_oc.umol_m2_s1']      <- 'co2.flux'
names(temp)[names(temp) == 'conc.h2o.mmol_mol.oc']           <- 'H2O'
names(temp)[names(temp) == 'par.current.chamber.umol_m2_s1'] <- 'PAR'
names(temp)[names(temp) == 'temp.leaf.current.chamber.c.oc'] <- 'TL'
names(temp)[names(temp) == 'VPD.Pa.oc']                      <- 'VPD'
names(temp)[names(temp) == 'swc_mean']                       <- 'swc'
names(temp)[names(temp) == 'conc_ci.co.nmol_mol']            <- 'COi'
names(temp)[names(temp) == 'conc_ci.h2o.mmol_mol']           <- 'H2Oi'
temp = temp[complete.cases(temp[,c('co.flux', 'Tr', 'PAR', 'TL', 'VPD')]),]
temp$timestamp <- as.POSIXct(strptime(temp$timestamp, format='%Y-%m-%d'))
plt <- ggpairs(temp %>% select(c(co.flux, Tr, PAR, TL, VPD, swc, g_tCO, COi)),
columnLabels = c('f[CO]', 'Tr', 'PAR', 'T[L]', 'VPD', 'SWC', 'g["t,CO"]', 'c["CO,i"]'), labeller='label_parsed',
lower = list(continuous = wrap("points", alpha = 0.3,    size=0.1),
combo = wrap("dot", alpha = 0.4,            size=0.2) ),
ggplot2::aes(colour = temp$treatment),
upper = list(continuous = wrap("cor", size = 2.5))) +
#labs(subtitle = "Numeric variable exploration") +
theme_bw() +
theme(text=element_text(family="serif"), axis.text.x = element_text(angle = -90, vjust = 0.5, hjust=1))
temp <- df
# Rename columns
names(temp)[names(temp) == 'flux.co.ch_oc.nmol_m2_s']        <- 'co.flux'
names(temp)[names(temp) == 'flux.h2o.ch_oc.mmol_m2_s']       <- 'Tr'
names(temp)[names(temp) == 'flux.co2.ch_oc.umol_m2_s1']      <- 'co2.flux'
names(temp)[names(temp) == 'conc.h2o.mmol_mol.oc']           <- 'H2O'
names(temp)[names(temp) == 'par.current.chamber.umol_m2_s1'] <- 'PAR'
names(temp)[names(temp) == 'temp.leaf.current.chamber.c.oc'] <- 'TL'
names(temp)[names(temp) == 'VPD.Pa.oc']                      <- 'VPD'
names(temp)[names(temp) == 'swc_mean']                       <- 'swc'
names(temp)[names(temp) == 'conc_ci.co.nmol_mol']            <- 'COi'
names(temp)[names(temp) == 'conc_ci.h2o.mmol_mol']           <- 'H2Oi'
temp = temp[complete.cases(temp[,c('co.flux', 'Tr', 'PAR', 'TL', 'VPD')]),]
temp$timestamp <- as.POSIXct(strptime(temp$timestamp, format='%Y-%m-%d'))
# Rename columns
names(temp)
# Header ####
rm(list = ls())
library(ggplot2)
library(GGally) # Comparing variables and data exploration
library(mgcv) # Library to fit gams
library(gratia) # Modern library for visualizing and assessing gams
library(visreg)
library(dplyr)
library(tidyr)
library(xtable)
library(tibble)
setwd('./')
# 0) Load data ####
# - - - - - - - -
input_folder = './'
graphs_path = 'graphs/'
# Colours for each treatment
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
worst_concurvity <- function(m){
concurvity_matrix <- concurvity(m, full=F)$worst
# Remove any interaction terms
concurvity_matrix <- concurvity_matrix[,!grepl('^ti[(]', colnames(concurvity_matrix))]
concurvity_matrix <- concurvity_matrix[!grepl('^ti[(]', rownames(concurvity_matrix)),]
# Remove concurvities of parameters with themselves
concurvity_matrix <- concurvity_matrix[which(concurvity_matrix < 1)]
return(max(concurvity_matrix))
}
concurvity_list <- function(model_list){
conc_list <- c()
for (m in model_list){
conc_list <- append(conc_list, worst_concurvity(m))
}
return(conc_list)
}
r2_list <- function(model_list){
r2_list <- c()
for (m in model_list){
r2_list <- append(r2_list, summary(m)$r.sq)
}
return(r2_list)
}
visreg2 <- function(mod, xvar, by, data){
plt_plot <- visreg(mod, xvar = xvar, by=by, data = data, gg=T, method = "REML", overlay=T)
plt_line <- visreg(mod, xvar = xvar, data = data, gg=T, method = "REML", overlay=T)
plt_plot_data = ggplot_build(plt_plot)$data[[2]] # points and colours
plt_line_data = ggplot_build(plt_line)$data[[3]] # line
plt_std_data = ggplot_build(plt_line)$data[[1]] %>% # stddev around the line
group_by(x) %>%
mutate(y_type = if_else(y == min(y), "ymin", "ymax")) %>%
spread(key = y_type, value = y)
yminval = min(plt_plot_data$y)- (max(plt_plot_data$y) - min(plt_plot_data$y))/20
plt_plot_data$grp <- NA
for (grp_num in 1:length(levels(plt_plot$plot_env$bb))){
current_label = levels(plt_plot$plot_env$bb)[grp_num]
current_colour = plt_plot$plot_env$col[grp_num]
plt_plot_data[which(plt_plot_data$colour == current_colour),]$grp <- current_label
}
plt = ggplot()
plt = plt + geom_point(data=plt_plot_data, aes(x=x, y=y, color = grp), size=0.75)
plt = plt + geom_ribbon(data=plt_std_data, aes(x=x, ymin=ymin, ymax=ymax), fill = 'gray85', alpha=0.5)
plt = plt + geom_line(data=plt_line_data, aes(x=x, y=y), color = 'black')
plt = plt + theme_bw()
plt = plt + labs(x=plt_plot$labels$x, y=plt_plot$labels$y)
#plt = plt + labs(x='Tr', y='CO flux', colour='Treatment')
return(plt)
}
visreg3 <- function(mod, xvar, by, data, minrange=0.25, maxrange=0.75){
plt_plot <- visreg(mod, xvar = xvar, by=by, data = data, gg=T, method = "REML", overlay=T)
plt_line <- visreg(mod, xvar = xvar, data = data, gg=T, method = "REML", overlay=T)
plt_plot_data = ggplot_build(plt_plot)$data[[2]] # points and colours
plt_line_data = ggplot_build(plt_line)$data[[3]] # line
plt_std_data = ggplot_build(plt_line)$data[[1]] %>% # stddev around the line
group_by(x) %>%
mutate(y_type = if_else(y == min(y), "ymin", "ymax")) %>%
spread(key = y_type, value = y)
yminval = min(ggplot_build(plt_line)$data[[1]]$y)
plt_plot_data$grp <- NA
plt_line_data$grp <- NA
for (grp_num in 1:length(levels(plt_plot$plot_env$bb))){
current_label = levels(plt_plot$plot_env$bb)[grp_num]
current_colour = plt_plot$plot_env$col[grp_num]
plt_plot_data[which(plt_plot_data$colour == current_colour),]$grp <- current_label
# Create quantile range df
xmin = quantile(plt_plot_data[which(plt_plot_data$group == grp_num),]$x, minrange)
xmax = quantile(plt_plot_data[which(plt_plot_data$group == grp_num),]$x, maxrange)
# Find median and corresponding y value for median
medianxval = median(plt_plot_data[which(plt_plot_data$group == grp_num),]$x)
next_higher <- min(plt_line_data[which(plt_line_data$x > medianxval),]$y, na.rm = T)
next_lower  <- max(plt_line_data[which(plt_line_data$x < medianxval),]$y, na.rm = T)
medianyval = (next_higher + next_lower)/2
if(!exists('quantile_df')){
quantile_df <- plt_line_data[which((plt_line_data$x >= xmin) & (plt_line_data$x < xmax)),]
quantile_df$grp <- current_label
quantile_df = quantile_df[which(!is.na(quantile_df$grp)),]
}else{
temp <- plt_line_data[which((plt_line_data$x >= xmin) & (plt_line_data$x < xmax)),]
temp$grp <- current_label
temp = temp[which(!is.na(temp$grp)),]
quantile_df = rbind(quantile_df, temp)
}
if(!exists('median_df')){
median_df = data.frame(grp = current_label, x = medianxval, y = medianyval)
}else{
median_df = rbind(median_df, data.frame(grp = current_label, x = medianxval, y = medianyval))
}
}
print(median_df)
plt = ggplot()
plt = plt + geom_ribbon(data=quantile_df, aes(x=x, ymin=yminval, ymax=y, fill=grp), alpha=0.5)
plt = plt + geom_ribbon(data=plt_std_data, aes(x=x, ymin=ymin, ymax=ymax), fill = 'gray85', alpha=0.5)
plt = plt + geom_line(data=plt_line_data, aes(x=x, y=y), color = 'black')
plt = plt + geom_point(data=median_df, aes(x=x, y=y, colour=grp), size=2)
plt = plt + theme_bw()
plt = plt + labs(x=plt_plot$labels$x, y=plt_plot$labels$y)
return(plt)
}
# 1) Preparing data ####
# - - - - - - - - - - - -
# https://towardsdatascience.com/producing-insights-with-generalized-additive-models-gams-cf2b68b1b847
df <- read.csv(paste0(input_folder,'all_summarised_daily.csv'))
temp <- df
# Rename columns
names(temp)
temp = temp[complete.cases(temp[,c('co.flux', 'Tr', 'PAR', 'TL', 'VPD')]),]
temp$timestamp <- as.POSIXct(strptime(temp$timestamp, format='%Y-%m-%d'))
plt <- ggpairs(temp %>% select(c(co.flux, Tr, PAR, TL, VPD, swc, g_tCO, COi)),
columnLabels = c('f[CO]', 'Tr', 'PAR', 'T[L]', 'VPD', 'SWC', 'g["t,CO"]', 'c["CO,i"]'), labeller='label_parsed',
lower = list(continuous = wrap("points", alpha = 0.3,    size=0.1),
combo = wrap("dot", alpha = 0.4,            size=0.2) ),
ggplot2::aes(colour = temp$treatment),
upper = list(continuous = wrap("cor", size = 2.5))) +
#labs(subtitle = "Numeric variable exploration") +
theme_bw() +
theme(text=element_text(family="serif"), axis.text.x = element_text(angle = -90, vjust = 0.5, hjust=1))
plt <- ggpairs(temp %>% select(c(co.flux, Tr, PAR, TL, VPD, swc, g_tCO, co.ci)),
columnLabels = c('f[CO]', 'Tr', 'PAR', 'T[L]', 'VPD', 'SWC', 'g["t,CO"]', 'c["CO,i"]'), labeller='label_parsed',
lower = list(continuous = wrap("points", alpha = 0.3,    size=0.1),
combo = wrap("dot", alpha = 0.4,            size=0.2) ),
ggplot2::aes(colour = temp$treatment),
upper = list(continuous = wrap("cor", size = 2.5))) +
#labs(subtitle = "Numeric variable exploration") +
theme_bw() +
theme(text=element_text(family="serif"), axis.text.x = element_text(angle = -90, vjust = 0.5, hjust=1))
plt <- ggpairs(temp %>% select(c(co.flux, Tr, PAR, TL, VPD, SWC, g_tCO, co.ci)),
columnLabels = c('f[CO]', 'Tr', 'PAR', 'T[L]', 'VPD', 'SWC', 'g["t,CO"]', 'c["CO,i"]'), labeller='label_parsed',
lower = list(continuous = wrap("points", alpha = 0.3,    size=0.1),
combo = wrap("dot", alpha = 0.4,            size=0.2) ),
ggplot2::aes(colour = temp$treatment),
upper = list(continuous = wrap("cor", size = 2.5))) +
#labs(subtitle = "Numeric variable exploration") +
theme_bw() +
theme(text=element_text(family="serif"), axis.text.x = element_text(angle = -90, vjust = 0.5, hjust=1))
plt = plt + scale_colour_manual(values=cbPalette) + scale_fill_manual(values=cbPalette)
plt
# Production & transport in 2 models!
m_coi <- gam(COi ~ s(TL, k=4, by=treatment) + s(PAR, k=4, by=treatment) + treatment, # Production GOOD
data=testing_dataset, method='REML', select=T)
testing_dataset <- temp
testing_dataset$treatment <- as.factor(testing_dataset$treatment)
testing_dataset$season <- as.factor(testing_dataset$season)
#testing_dataset <- temp2
testing_dataset$prob <- ''
testing_dataset[which((testing_dataset$VPD > 2000) & (testing_dataset$co.flux < -0.5) & (testing_dataset$treatment == 'irr')),]$prob  <- 'b' #'bad irr'
testing_dataset[which((testing_dataset$co.flux < -0.7) & (testing_dataset$treatment == 'irr')),]$prob  <- 'b' #'bad irr'
testing_dataset <- testing_dataset[which(testing_dataset$prob != 'b'),]
testing_dataset[which(testing_dataset$COi < 0),]$COi <- NA
testing_dataset[which(testing_dataset$co.ci < 0),]$co.ci <- NA
mX <- gam(co.flux ~ s(PAR, by=treatment, k=4) + te(TL, Tr, by=treatment) + treatment,
data=testing_dataset, method='REML', select=T)
AIC(mX)
summary(mX)
concurvity(mX, full=F)$worst
testing_dataset <- temp
testing_dataset$treatment <- as.factor(testing_dataset$treatment)
testing_dataset$season <- as.factor(testing_dataset$season)
# Remove 2 outliers
testing_dataset$prob <- ''
testing_dataset[which((testing_dataset$VPD > 2000) & (testing_dataset$co.flux < -0.5) & (testing_dataset$treatment == 'irr')),]$prob  <- 'b' #'bad irr'
testing_dataset[which((testing_dataset$co.flux < -0.7) & (testing_dataset$treatment == 'irr')),]$prob  <- 'b' #'bad irr'
testing_dataset <- testing_dataset[which(testing_dataset$prob != 'b'),]
testing_dataset[which(testing_dataset$co.ci < 0),]$co.ci <- NA
# a) Production model
m_coi <- gam(co.ci ~ s(TL, k=4, by=treatment) + s(PAR, k=4, by=treatment) + treatment, # Production GOOD
data=testing_dataset, method='REML', select=T)
p = visreg(m_coi,"PAR", by="treatment", data = testing_dataset,  method = "REML", overlay=T, plot = F,
partial = F, rug = F)
p2 = visreg(m_coi, xvar = 'PAR', by='treatment', data = testing_dataset, gg=T, method = "REML", overlay=T)
plt = ggplot(p$fit, aes(PAR, visregFit, linetype=treatment, fill=treatment, colour=treatment))
plt = plt + geom_point(data=p2$data, aes(x=x, y=y, colour=treatment), size=0.75)
plt = plt + geom_ribbon(aes(ymin=visregLwr, ymax=visregUpr), alpha=0.5, colour=NA)
plt = plt + geom_line()
plt = plt + scale_colour_manual(values=cbPalette)  + scale_fill_manual(values=cbPalette)
plt = plt + labs(x = expression(paste("PAR [",mu,mol~m^{-2}~s^{-1},"]")),
y = expression(paste(c['CO,i']," [",nmol~mol^{-1},"]")),
colour='Treatment', fill='Treatment', linetype='Treatment')
plt = plt + theme_bw()
plt = plt + theme(legend.position = c(0.18, 0.80), text=element_text(family="serif"),
plot.title = element_text(hjust = 0.5))
plt = plt + ggtitle( expression(paste('PAR contribution to ','c'['CO,i'])))
plt_coi_par <- plt
plt_coi_par
p = visreg(m_coi,"PAR", by="treatment", data = testing_dataset,  method = "REML", overlay=T, plot = F,
partial = F, rug = F)
p2 = visreg(m_coi, xvar = 'PAR', by='treatment', data = testing_dataset, gg=T, method = "REML", overlay=T)
plt = ggplot(p$fit, aes(PAR, visregFit, linetype=treatment, fill=treatment, colour=treatment))
plt = plt + geom_point(data=p2$data, aes(x=x, y=y, colour=treatment), size=0.75)
plt = plt + geom_ribbon(aes(ymin=visregLwr, ymax=visregUpr), alpha=0.5, colour=NA)
plt = plt + geom_line()
plt = plt + scale_colour_manual(values=cbPalette)  + scale_fill_manual(values=cbPalette)
plt = plt + labs(x = expression(paste("PAR [",mu,mol~m^{-2}~s^{-1},"]")),
y = expression(paste(c['CO,i']," [",nmol~mol^{-1},"]")),
colour='Treatment', fill='Treatment', linetype='Treatment')
plt = plt + theme_bw()
plt = plt + theme(legend.position.inside = c(0.18, 0.80), text=element_text(family="serif"),
plot.title = element_text(hjust = 0.5))
plt = plt + ggtitle( expression(paste('PAR contribution to ','c'['CO,i'])))
plt_coi_par <- plt
plt_coi_par
p = visreg(m_coi,"TL", by="treatment", data = testing_dataset,  method = "REML", overlay=T, plot = F,
partial = F, rug = F)
p2 = visreg(m_coi, xvar = 'TL', by='treatment', data = testing_dataset, gg=T, method = "REML", overlay=T)
plt = ggplot(p$fit, aes(TL, visregFit, linetype=treatment, fill=treatment, colour=treatment))
plt = plt + geom_point(data=p2$data, aes(x=x, y=y, colour=treatment), size=0.75)
plt = plt + geom_ribbon(aes(ymin=visregLwr, ymax=visregUpr), alpha=0.5, colour=NA)
plt = plt + geom_line()
plt = plt + scale_colour_manual(values=cbPalette)  + scale_fill_manual(values=cbPalette)
plt = plt + labs(x = expression(paste('T'[L]," [°C]")),
y = expression(paste(c['CO,i']," [",nmol~mol^{-1},"]")),
colour='Treatment', fill='Treatment', linetype='Treatment')
plt = plt + theme_bw()
plt = plt + theme(legend.position.inside = c(0.18, 0.80), text=element_text(family="serif"),
plot.title = element_text(hjust = 0.5))
plt = plt + ggtitle( expression(paste('T'['L']," contribution to ",'c'['CO,i'])))
plt_coi_tl <- plt
plt_coi_tl
